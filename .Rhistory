rob_se <- list( sqrt(diag(vcovHC(model1_summary, type = "HC1") ) ) )
stargazer( model1_summary,
se = rob_se)
stargazer( model1_summary,
se = rob_se,
type = "text")
# load the stargazer library
# estimate different model specifications
spec1 <- lm(score ~ size, data = CASchools)
spec2 <- lm(score ~ size + english, data = CASchools)
spec3 <- lm(score ~ size + english + lunch, data = CASchools)
spec4 <- lm(score ~ size + english + calworks, data = CASchools)
spec5 <- lm(score ~ size + english + lunch + calworks, data = CASchools)
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(spec1, type = "HC1"))),
sqrt(diag(vcovHC(spec2, type = "HC1"))),
sqrt(diag(vcovHC(spec3, type = "HC1"))),
sqrt(diag(vcovHC(spec4, type = "HC1"))),
sqrt(diag(vcovHC(spec5, type = "HC1"))))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"),
type ="text")
# load the stargazer library
# estimate different model specifications
spec1 <- lm(score ~ size, data = CASchools)
spec2 <- lm(score ~ size + english, data = CASchools)
spec3 <- lm(score ~ size + english + lunch, data = CASchools)
spec4 <- lm(score ~ size + english + calworks, data = CASchools)
spec5 <- lm(score ~ size + english + lunch + calworks, data = CASchools)
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(spec1, type = "HC1"))),
sqrt(diag(vcovHC(spec2, type = "HC1"))),
sqrt(diag(vcovHC(spec3, type = "HC1"))),
sqrt(diag(vcovHC(spec4, type = "HC1"))),
sqrt(diag(vcovHC(spec5, type = "HC1"))))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"),
type ="text",
keep.stat = c("N"))
Adjusted
help(stargazer)
# load the stargazer library
# estimate different model specifications
spec1 <- lm(score ~ size, data = CASchools)
spec2 <- lm(score ~ size + english, data = CASchools)
spec3 <- lm(score ~ size + english + lunch, data = CASchools)
spec4 <- lm(score ~ size + english + calworks, data = CASchools)
spec5 <- lm(score ~ size + english + lunch + calworks, data = CASchools)
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(spec1, type = "HC1"))),
sqrt(diag(vcovHC(spec2, type = "HC1"))),
sqrt(diag(vcovHC(spec3, type = "HC1"))),
sqrt(diag(vcovHC(spec4, type = "HC1"))),
sqrt(diag(vcovHC(spec5, type = "HC1"))))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"),
type ="text",
keep.stat = c("N", "adj.rsq"))
# load packages
library("AER")
library("dplyr")
library("stargazer")
library("lmtest")
# load the the data set in the workspace
data(CASchools)
class(CASchools)
head(CASchools)
CASchools %>%
mutate( STR = students / teachers ) %>%
mutate( score = (read + math) / 2 ) -> CASchools
summary(CASchools)
CASchools %>%
select(STR, score) %>%
summary()
stargazer(CASchools, type = "text")
CASchools %>%
stargazer( type = "text", summary.stat = c("n", "p75", "sd") )
plot(score ~ STR,
data = CASchools,
main = "Scatterplot of TestScore and STR",
xlab = "STR (X)",
ylab = "Test Score (Y)")
cor(CASchools$STR, CASchools$score)
# First, we rename the variable `STR`
CASchools %>%
dplyr::rename( size = STR) -> CASchools
# Run regression and save results in the varaiable `model1_summary`
model1_summary <- lm( score ~ size, data = CASchools)
# See the results
summary(model1_summary)
# compute heteroskedasticity-robust standard errors
vcov <- vcovHC(model1_summary, type = "HC1")
# get standard error: the square root of the diagonal element in vcov
robust_se <- sqrt(diag(vcov))
robust_se
# load `lmtest`
library(lmtest)
# Combine robust standard errors
coeftest(model1_summary, vcov. = vcov)
# load
library(stargazer)
# Create output by stargazer
stargazer::stargazer(model1_summary, type ="text")
# Prepare robust standard errors in list
rob_se <- list( sqrt(diag(vcovHC(model1_summary, type = "HC1") ) ) )
# generate regression table.
stargazer( model1_summary,
se = rob_se,
type = "text")
# load the stargazer library
# estimate different model specifications
spec1 <- lm(score ~ size, data = CASchools)
spec2 <- lm(score ~ size + english, data = CASchools)
spec3 <- lm(score ~ size + english + lunch, data = CASchools)
spec4 <- lm(score ~ size + english + calworks, data = CASchools)
spec5 <- lm(score ~ size + english + lunch + calworks, data = CASchools)
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(spec1, type = "HC1"))),
sqrt(diag(vcovHC(spec2, type = "HC1"))),
sqrt(diag(vcovHC(spec3, type = "HC1"))),
sqrt(diag(vcovHC(spec4, type = "HC1"))),
sqrt(diag(vcovHC(spec5, type = "HC1"))))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"),
type ="text",
keep.stat = c("N", "adj.rsq"))
library("AER")
library("dplyr")
library("stargazer")
library("lmtest")
data(CASchools)
# load the the data set in the workspace
data(CASchools)
class(CASchools)
head(CASchools)
CASchools %>%
mutate( STR = students / teachers ) %>%
mutate( score = (read + math) / 2 ) -> CASchools
CASchools
head(CASchools)
# load the the data set in the workspace
data(CASchools)
names(CASchools)
CASchools %>%
mutate( STR = students / teachers ) %>%
mutate( score = (read + math) / 2 )
names(CASchools)
summary(CASchools)
CASchools %>%
mutate( STR = students / teachers ) %>%
mutate( score = (read + math) / 2 ) -> CASchools
summary(CASchools)
CASchools %>%
select(STR, score) %>%
summary()
stargazer(CASchools, type = "text")
CASchools %>%
stargazer( type = "text", summary.stat = c("n", "p75", "sd") )
plot(score ~ STR,
data = CASchools,
main = "Scatterplot of TestScore and STR",
xlab = "STR (X)",
ylab = "Test Score (Y)")
# First, we rename the variable `STR`
CASchools %>%
dplyr::rename( size = STR) -> CASchools
# Run regression and save results in the varaiable `model1_summary`
model1_summary <- lm( score ~ size, data = CASchools)
# See the results
summary(model1_summary)
# compute heteroskedasticity-robust standard errors
vcov <- vcovHC(model1_summary, type = "HC1")
# get standard error: the square root of the diagonal element in vcov
robust_se <- sqrt(diag(vcov))
robust_se
# load `lmtest`
library(lmtest)
# Combine robust standard errors
coeftest(model1_summary, vcov. = vcov)
# load
library(stargazer)
# Create output by stargazer
stargazer::stargazer(model1_summary, type ="text")
# Prepare robust standard errors in list
rob_se <- list( sqrt(diag(vcovHC(model1_summary, type = "HC1") ) ) )
# generate regression table.
stargazer( model1_summary,
se = rob_se,
type = "text")
# load the stargazer library
# estimate different model specifications
spec1 <- lm(score ~ size, data = CASchools)
spec2 <- lm(score ~ size + english, data = CASchools)
spec3 <- lm(score ~ size + english + lunch, data = CASchools)
spec4 <- lm(score ~ size + english + calworks, data = CASchools)
spec5 <- lm(score ~ size + english + lunch + calworks, data = CASchools)
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(spec1, type = "HC1"))),
sqrt(diag(vcovHC(spec2, type = "HC1"))),
sqrt(diag(vcovHC(spec3, type = "HC1"))),
sqrt(diag(vcovHC(spec4, type = "HC1"))),
sqrt(diag(vcovHC(spec5, type = "HC1"))))
# generate a LaTeX table using stargazer
stargazer(spec1, spec2, spec3, spec4, spec5,
se = rob_se,
digits = 3,
header = F,
column.labels = c("(I)", "(II)", "(III)", "(IV)", "(V)"),
type ="text",
keep.stat = c("N", "adj.rsq"))
??mvrnorm
unlink('09_PS3_cache', recursive = TRUE)
hist_long1 <- hist_long1 + geom_density(binwidth = 0.01)
plot(hist_long1)
#######################
#Problem Set 3
#TA Shuhei Kaneko
#######################
#Problem 1
set.seed(77777)
library(MASS)
library(ggplot2)
#set parameters
beta_0 = 0
beta_1 = 2
beta_2 = 1
#DGP
N = 200
num_sim = 500
mu <- c(3,4)
sigma <- matrix(c(2,1,1,2), 2,2)
beta_1_long = numeric(length(num_sim))
beta_1_short = numeric(length(num_sim))
for (i in 1:500){
X <- mvrnorm(N, mu, sigma)
x_1 <- X[,1]
x_2 <- X[,2]
eps <- rnorm(N)
y = beta_0 + beta_1*x_1 + beta_2*x_2 + eps
data <- as.data.frame(cbind(y, x_1, x_2))
reg1 <- lm(y ~ x_1 + x_2, data = data)
beta_1_long[i] <- reg1$coefficients[2]
reg2 <- lm(y ~ x_1, data = data)
beta_1_short[i] <- reg2$coefficients[2]
}
beta_1_long <- as.data.frame(beta_1_long)
beta_1_short <- as.data.frame(beta_1_short)
hist_long1 <- ggplot(beta_1_long, aes(x = beta_1_long))
hist_long1 <- hist_long1 + geom_density(binwidth = 0.01)
plot(hist_long1)
hist_short1 <- ggplot(beta_1_short, aes(x = beta_1_short))
hist_short1 <- hist_short1 + geom_histogram(binwidth = 0.01)
plot(hist_short1)
plot(hist_long1)
hist_short1 <- hist_short1 + geom_density(binwidth = 0.01)
plot(hist_short1)
unlink('09_PS3_cache', recursive = TRUE)
with()
help(with)
library("MASS")
library("dplyr")
N = 500
Mu = c(1,2)
Sigma12 = matrix( c(1, 0.9, 0.9, 1), nrow = 2, ncol = 2)
result_vec1 = numeric(1000)
result_vec2 = numeric(1000)
X <- mvrnorm(N, Mu, Sigma12)
X
x1 <- X[, 1]
error <- X[, 2]
x1
error
rho = 1
error <- rnorm(N, mean = 0, sd = 2)
z <- rnorm(N, mean = 1, sd = 1)
x <- rho*z + 0.5*error
y = 1 + 2*x + error
data <- data.frame(  x = x,
y = y,
z = z)
result <- ivreg( y ~ x | z, data = data)
library("AER")
result <- ivreg( y ~ x | z, data = data)
result
library("MASS")
library("dplyr")
library("AER")
N = 500
Mu = c(1,2)
Sigma12 = matrix( c(1, 0.9, 0.9, 1), nrow = 2, ncol = 2)
result_vec1 = numeric(1000)
result_vec2 = numeric(1000)
for (i in 1:1000){
rho = 1
error <- rnorm(N, mean = 0, sd = 2)
z <- rnorm(N, mean = 1, sd = 1)
x <- rho*z + 0.5*error
y = 1 + 2*x + error
data <- data.frame(  x = x,
y = y,
z = z)
result <- lm( y ~ x, data = data)
result_vec1[i] <- result$coefficients[2]
result <- ivreg( y ~ x | z, data = data)
result_vec2[i] <- result$coefficients[2]
}
summary(result_vec1)
summary(result_vec2)
library("reshape")
result_data <- data.frame(  Blong = result_vec1,
Bshort = result_vec2 )
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" )
library("ggplot2")
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" )
plot(fig)
library("MASS")
library("dplyr")
library("AER")
N = 500
Mu = c(1,2)
Sigma12 = matrix( c(1, 0.9, 0.9, 1), nrow = 2, ncol = 2)
result_vec1 = numeric(1000)
result_vec2 = numeric(1000)
for (i in 1:1000){
rho = 0.1
error <- rnorm(N, mean = 0, sd = 2)
z <- rnorm(N, mean = 1, sd = 1)
x <- rho*z + 0.5*error
y = 1 + 2*x + error
data <- data.frame(  x = x,
y = y,
z = z)
result <- lm( y ~ x, data = data)
result_vec1[i] <- result$coefficients[2]
result <- ivreg( y ~ x | z, data = data)
result_vec2[i] <- result$coefficients[2]
}
summary(result_vec1)
summary(result_vec2)
library("reshape")
library("ggplot2")
result_data <- data.frame(  B_OLS = result_vec1,
B_IV = result_vec2 )
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" )
plot(fig)
# Run simple reg first and save coef on x1.
# Run omitting x2 and save coef x2.
cor(z, x)
library("MASS")
library("dplyr")
library("AER")
N = 500
Mu = c(1,2)
Sigma12 = matrix( c(1, 0.9, 0.9, 1), nrow = 2, ncol = 2)
result_vec1 = numeric(1000)
result_vec2 = numeric(1000)
for (i in 1:1000){
rho = 0.2
error <- rnorm(N, mean = 0, sd = 2)
z <- rnorm(N, mean = 1, sd = 1)
x <- rho*z + 0.5*error
y = 1 + 2*x + error
data <- data.frame(  x = x,
y = y,
z = z)
result <- lm( y ~ x, data = data)
result_vec1[i] <- result$coefficients[2]
result <- ivreg( y ~ x | z, data = data)
result_vec2[i] <- result$coefficients[2]
}
summary(result_vec1)
summary(result_vec2)
library("reshape")
library("ggplot2")
result_data <- data.frame(  B_OLS = result_vec1,
B_IV = result_vec2 )
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" )
plot(fig)
# Run simple reg first and save coef on x1.
# Run omitting x2 and save coef x2.
unlink('10_IV1_cache', recursive = TRUE)
knit_with_parameters('C:/Users/Yuta/Dropbox/Teaching/2019S_Applied_Econometrics_JPN_ENG/Material_Github/10_IV1.Rmd')
render_book()
mroz
data(mroz)
library(Ecdat)
install.packages("Ecdata")
install.packages("Ecdat")
data(mroz)
library(Ecdat)
Mroz
data(Mroz)
str(Mroz)
Ecdat::Mroz
data <- Ecdat::Mroz
data
str(Mroz)
# Install "Ecdat" package, which contains a various dataset for econometrics
# install.packages("Ecdat")
library(Ecdat)
# load "Mroz" dataset
data <- Ecdat::Mroz
library(stargazer)
stargazer(data, type = text)
library(stargazer)
stargazer(data, type = "text")
names(data)
data(mroz)
library("foreign")
data <- read.dta("MROZ.DTA")
data
# OLS regression
result_OLS <- lm( lwage ~ educ + exper + expersq, data = data)
result_OLS
summary(result_OLS)
library("AER")
# IV regression using fathereduc and mothereduc
result_IV <- ivreg(lwage ~ educ + exper + expersq | fathereduc + mothereduc + exper + expersq)
# IV regression using fathereduc and mothereduc
result_IV <- ivreg(lwage ~ educ + exper + expersq | fathereduc + mothereduc + exper + expersq, data = data)
# IV regression using fathereduc and mothereduc
result_IV <- ivreg(lwage ~ educ + exper + expersq | fatheduc + motheduc + exper + expersq, data = data)
summary(result_IV)
stargazer(result_OLS, result_IV, type ="text")
# First stage regression
result_OLS <- lm( educ ~ exper + expersq, data = data)
# First stage regression
result_1st <- lm( educ ~ exper + expersq, data = data)
summary(result_1st)
# First stage regression
result_1st <- lm( educ ~ fatheduc + motheduc + exper + expersq, data = data)
summary(result_1st)
stargazer(result_1st, type ="text")
result_OLS
str(result_IV)
View(data)
# data cleaning
data %>%
select(lwage, educ, exper, expersq, motheduc, fatheduc) %>%
filter( is.na(lwage) == 0 )
library("dplyr")
# data cleaning
data %>%
select(lwage, educ, exper, expersq, motheduc, fatheduc) %>%
filter( is.na(lwage) == 0 )
# data cleaning
data %>%
select(lwage, educ, exper, expersq, motheduc, fatheduc) %>%
filter( is.na(lwage) == 0 ) -> data
# OLS regression
result_OLS <- lm( lwage ~ educ + exper + expersq, data = data)
summary(result_OLS)
# IV regression using fathereduc and mothereduc
result_IV <- ivreg(lwage ~ educ + exper + expersq | fatheduc + motheduc + exper + expersq, data = data)
summary(result_IV)
# Show result
stargazer(result_OLS, result_IV, type ="text")
# Robust standard errors
# gather robust standard errors in a list
rob_se <- list(sqrt(diag(vcovHC(result_OLS, type = "HC1"))),
sqrt(diag(vcovHC(result_IV, type = "HC1"))))
# generate table
# Show result
stargazer(result_OLS, result_IV, type ="text", se = rob_se)
result_1st <- lm(educ ~ motheduc + fatheduc + exper + expersq, data = data)
# F test
linearHypothesis(mod_relevance1,
c("fatheduc = 0", "motheduc = 0" ),
vcov = vcovHC, type = "HC1")
# F test
linearHypothesis(result_1st,
c("fatheduc = 0", "motheduc = 0" ),
vcov = vcovHC, type = "HC1")
vcovHC
