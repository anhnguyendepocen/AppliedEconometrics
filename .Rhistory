}
for (i in 1:Nsamples ){
test <- sample(x = pop, size = 100)
result1[i] <- mean(test)
}
result1
# Simpler approach
est1 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
# draw random sample of 100 observations from the variable pop
test <- sample(x = pop, size = 100)
# Use loop to repeat 2000 times.
Nsamples = 2000
result1 <- numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = 100)
result1[i] <- mean(test)
}
# Simpler approach
est1 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
est1
result1 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
result2 <- replicate(expr = mean(sample(x = pop, size = 1000)), n = Nsamples)
mean(result1)
mean(result2)
pop_mean
sd(result1)
sd(result2)
qplot(result1, geom = "density",
xlab = "Age",
ylab = "Density")
qplot(result2, geom = "density",
xlab = "Age",
ylab = "Density")
result1 <- replicate(expr = mean(sample(x = pop, size = 10)), n = Nsamples)
result1 <- replicate(expr = mean(sample(x = pop, size = 10)), n = Nsamples)
result2 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
result2 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
result3 <- replicate(expr = mean(sample(x = pop, size = 1000)), n = Nsamples)
qplot(result1,  geom = "density",
xlab = "Age",
ylab = "Density")
plot(density(result1))
plot(density(result2))
plot(density(result1), lwd = 2)
plot(density(result2), lwd = 2)
fig <-
ggplot() +
xlab("Sample mean") +
geom_density( data =result1)
fig <-
ggplot() +
xlab("Sample mean") +
geom_density( aes(x = result1))
plot(fig)
result_data <- data.frame(  Ybar10 = result1,
Ybar100 = result2,
Ybar1000 = result3)
str(result_data)
qplot(result1,  geom = "density",
xlab = "Age",
ylab = "Density")
fig <-
ggplot(data = result_data) +
xlab("Sample mean") +
geom_density( aes(x = result1)) +
geom_density( aes(x = result2)) +
geom_density( aes(x = result3))
plot(fig)
fig <-
ggplot(data = result_data) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density")
plot(fig)
fig <-
ggplot(data = result_data) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density") +
geom_line(aes(x = Ybar100 ) , stat = "density") +
geom_line(aes(x = Ybar1000 ) , stat = "density")
plot(fig)
# Use reshape library
library("reshape")
# Use reshape library
install.package("reshape")
install.packages("reshape")
library("reshape")
# Use reshape library
# install.packages("reshape")
library("reshape")
fig <-
ggplot(data = result_data) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density") +
geom_line(aes(x = Ybar100 ) , stat = "density") +
geom_line(aes(x = Ybar1000 ) , stat = "density")
melt(data = result_data)
fig <-
ggplot(data = data_for_plog) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density", colours = variable )
data_for_plot <- melt(data = result_data)
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density", colours = variable )
data_for_plot <- melt(data = result_data)
sdata_for_plot
data_for_plot
str(data_for_plot)
data_for_plot <- melt(data = result_data, variable.name = "variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = Ybar10 ) , stat = "density", colours = variable )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(, stat = "density", colours = variable )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line( stat = "density", colours = variable )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line( stat = "density", aes(colours = variable ) )
plot(fig)
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line( stat = "density", aes(colour = variable ) )
plot(fig)
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(x = value, stat = "density", aes(colour = variable ) )
plot(fig)
data_for_plot
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" )
plot(fig)
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=pop_mean ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(123)
# draw random sample of 100 observations from the variable pop
test <- sample(x = pop, size = 100)
# Use loop to repeat 2000 times.
Nsamples = 2000
result1 <- numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = 100)
result1[i] <- mean(test)
}
# Simpler approach.
result1 <- replicate(expr = mean(sample(x = pop, size = 10)), n = Nsamples)
result2 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
result3 <- replicate(expr = mean(sample(x = pop, size = 500)), n = Nsamples)
# Create dataframe
result_data <- data.frame(  Ybar10 = result1,
Ybar100 = result2,
Ybar500 = result3)
# Use reshape library
# install.packages("reshape")
library("reshape")
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=pop_mean ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(124)
# Use loop to repeat 2000 times.
Nsamples = 2000
result1 <- numeric(Nsamples)
samplesize = 100
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sigma / sqrt(samplesize))
}
pop_sd
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
plot(result1)
plot(density(result1))
samplesize = 10
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
plot(density(result1))
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
plot(density(result1))
samplesize = 5
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
plot(density(result1))
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
}
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 200, pop, pop_mean, pop_sd )
plot(density(result1))
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar200 = result_CLT3)
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
result1[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 200, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar200 = result_CLT3)
# Note: If you wanna quicky plot the density, type `plot(density(result1))`.
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=pop_mean ,colour="black")
plot(fig)
result_CLT_data
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 200, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar200 = result_CLT3)
result_CLT_data
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 200, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar200 = result_CLT3)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 200, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar200 = result_CLT3)
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=pop_mean ,colour="black")
plot(fig)
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 1000, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar1000 = result_CLT3)
# Note: If you wanna quicky plot the density, type `plot(density(result1))`.
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 5, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 1000, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar1000 = result_CLT3)
# Note: If you wanna quicky plot the density, type `plot(density(result1))`.
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
pop <- as.vector(pums2000$TOTINC)
pop <- as.vector(pums2000$INCTOT)
pop_mean = mean(pop)
pop_sd   = sd(pop)
# Average age in population
pop_mean
# Standard deviation of age in population
pop_sd
# Age population in population
library("ggplot2")
qplot(pop, geom = "density",
xlab = "Age",
ylab = "Density")
# Set the seed for the random number
set.seed(123)
# draw random sample of 100 observations from the variable pop
test <- sample(x = pop, size = 100)
# Use loop to repeat 2000 times.
Nsamples = 2000
result1 <- numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = 100)
result1[i] <- mean(test)
}
# Simple approach
result1 <- replicate(expr = mean(sample(x = pop, size = 10)), n = Nsamples)
result2 <- replicate(expr = mean(sample(x = pop, size = 100)), n = Nsamples)
result3 <- replicate(expr = mean(sample(x = pop, size = 500)), n = Nsamples)
# Create dataframe
result_data <- data.frame(  Ybar10 = result1,
Ybar100 = result2,
Ybar500 = result3)
# Use reshape library
# install.packages("reshape")
library("reshape")
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=pop_mean ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 5, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 1000, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar1000 = result_CLT3)
# Note: If you wanna quicky plot the density, type `plot(density(result1))`.
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
# Set the seed for the random number
set.seed(124)
# define function for simulation
f_simu_CLT = function(Nsamples, samplesize, pop, pop_mean, pop_sd ){
output = numeric(Nsamples)
for (i in 1:Nsamples ){
test <- sample(x = pop, size = samplesize)
output[i] <- ( mean(test) - pop_mean ) / (pop_sd / sqrt(samplesize))
}
return(output)
}
# Run simulation
Nsamples = 2000
result_CLT1 <- f_simu_CLT(Nsamples, 10, pop, pop_mean, pop_sd )
result_CLT2 <- f_simu_CLT(Nsamples, 100, pop, pop_mean, pop_sd )
result_CLT3 <- f_simu_CLT(Nsamples, 1000, pop, pop_mean, pop_sd )
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar1000 = result_CLT3)
# Note: If you wanna quicky plot the density, type `plot(density(result1))`.
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
# Random draw from standard normal distribution as comparison
result_stdnorm = rnorm(Nsamples)
result_stdnorm
# Create dataframe
result_CLT_data <- data.frame(  Ybar10 = result_CLT1,
Ybar100 = result_CLT2,
Ybar1000 = result_CLT3,
StandardNormal = result_stdnorm)
# Use "melt" to change the format of result_data
data_for_plot <- melt(data = result_CLT_data, variable.name = "Variable" )
# Use "ggplot2" to create the figure.
fig <-
ggplot(data = data_for_plot) +
xlab("Sample mean") +
geom_line(aes(x = value, colour = variable ),   stat = "density" ) +
geom_vline(xintercept=0 ,colour="black")
plot(fig)
